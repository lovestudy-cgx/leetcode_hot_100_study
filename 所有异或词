class Solution:
    def findAnagrams(self, s: str, p: str) -> List[int]:
        s_len, p_len = len(s), len(p)
        
        if s_len < p_len:
            return []

        ans = []
        s_count = [0] * 26
        p_count = [0] * 26
        for i in range(p_len):
            s_count[ord(s[i]) - 97] += 1
            p_count[ord(p[i]) - 97] += 1

        if s_count == p_count:#列表可以直接判断是否相等，这首先判断开头是不是
            ans.append(0)

        for i in range(s_len - p_len):
            s_count[ord(s[i]) - 97] -= 1
            s_count[ord(s[i + p_len]) - 97] += 1
            
            if s_count == p_count:
                ans.append(i + 1)

        return ans
他这个思路就是我开始固定一个窗口，从0开始，然后滑动窗口，前面的退出，后面的进入（采用count计数）


我写的如下一坨，没写出来的原因是：想模仿前面的用哈希表存储，然后每滑动窗口，就把对应key下面的value给去掉，但是手法显然不够。
class Solution(object):
    def findAnagrams(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: List[int]
        """
        hashdict=collections.defaultdict(list)
        s1,p1=len(s),len(p)
        for i in range(s1):
            if i+p1>s1:
                break
            for j in range()
            hashdict[s[i]].append(1)
