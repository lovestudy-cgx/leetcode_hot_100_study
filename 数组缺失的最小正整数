题目要求时间复杂度O(N),空间复杂度O（1）
我的思路：首先把列表排序，然后只保留大于0的，然后数值-序号是恒定值，其实就是1，看谁先不是1就返回相应值就好
错误代码如下
class Solution(object):
    def firstMissingPositive(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        nums.sort()
        if nums[-1]<0:
            return 1
        nums=nums[lambda x:x>0]#列表不可以推导式
        n=len(nums)
        before,after=0,0
        for i in range(n):
            if nums[i]!=i+1:
                return nums[i]-1
  思路的问题在于，如果我一个正整数重复出现，那这样就不对
  而且前面的nums只返回正整数也需要双指针法才能保证空间复杂度不超。


  如果不考虑时空复杂度：时空都是oN，因为你用了set存储数据
def firstMissingPositive(nums):
    # 将所有数字存入哈希表（set）
    num_set = set(nums)
    
    # 从 1 开始依次检查哪个正整数没有出现
    missing = 1
    while missing in num_set:（即使简单成这样也得想出来用while，然后设置初始指针是1）
        missing += 1
    return missing
  考虑时空复杂度：
  class Solution:
    def firstMissingPositive(self, nums: List[int]) -> int:
        n = len(nums)
        for i in range(n):
            if nums[i] <= 0:
                nums[i] = n + 1
        
        for i in range(n):
            num = abs(nums[i])
            if num <= n:
                nums[num - 1] = -abs(nums[num - 1])
        
        for i in range(n):
            if nums[i] > 0:
                return i + 1
        
        return n + 1
这个解法看似比较玄，但他的妙处在于把数字和索引生成函数关系，并且在原数组上操作，所以时空复杂度较低。


法二：置换法，思路上更好一些：把正整数就放在数组的最前面，这样数组的最后就是那些：负数、重复出现的整数、以及很大的正整数。
class Solution:
    def firstMissingPositive(self, nums: List[int]) -> int:
        n = len(nums)
        for i in range(n):
            while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]:
                nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]
        for i in range(n):
            if nums[i] != i + 1:
                return i + 1
        return n + 1

  python方法二不能写为 nums[i], nums[nums[i]-1] = nums[nums[i]-1], nums[i]的原因： 
  执行时右边的表达式会先被求值，生成一个临时元组（例如 (x, y)），然后依次赋值给左边的 nums[i] 和 nums[nums[i]-1]；
  在赋值过程中，nums[i]的值会被先修改，当执行到第二个赋值 nums[nums[i]-1] 时，此时的 nums[i] 已经是交换后的新值（不再是原来的值）。
示例说明：假设 nums = [3, 4, -1, 1]，
初始时 i=0：执行 nums[i], nums[nums[i]-1] = nums[nums[i]-1], nums[i]：右边求值为 nums[3-1] = nums[2] = -1 和 nums[0] = 3，
生成临时元组 (-1, 3)。先赋值 nums[i] = -1（此时 i=0，nums[0] 被修改为 -1）。然后计算 nums[nums[i]-1]，
此时 nums[i] 已经是 -1，因此索引为 -1-1 = -2（等价于 nums[-2]，即倒数第二个元素 4）。
最终将 nums[-2]赋值为 3，结果：nums 变为 [-1, 4, 3, 1]，交换完全错误！

而只有nums[i]-1等于i的时候才同样会影响，但是这已经在while判断中排除！精妙
