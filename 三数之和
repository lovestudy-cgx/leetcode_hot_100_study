class Solution(object):
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        left=0
        len1=len(nums)
        right=len1-1
        list1=[]
        while(right>=2):
            for i in range(1,right):
                if nums[left]+nums[right]+nums[i]==0:
                    list1.append([nums[left],nums[right],nums[i]])
            right-=1
        return list1
    没有设计列表去重：比如【0，0，0，0】，他会返回四个【0，0，0】
    left没有动，始终为0，在此基础上时间复杂度都是oN方，程序冗长


答案：
    class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        n = len(nums)
        nums.sort()#为去重埋下伏笔
        ans = list()
        
        # 枚举 a
        for first in range(n):
            # 需要和上一次枚举的数不相同
            if first > 0 and nums[first] == nums[first - 1]:#因为first如果和前一个一样，重复遍历就没有意义，在第一次遍历里就已经记录了
                continue#continue的意思是循环加一，break才是跳出for循环
            # c 对应的指针初始指向数组的最右端
            third = n - 1
            target = -nums[first]#second和third加起来是target
            # 枚举 b
            for second in range(first + 1, n):
                # 需要和上一次枚举的数不相同
                if second > first + 1 and nums[second] == nums[second - 1]:#在first之后连续两个值一样，说明second取重复，就过，让second+1
                    continue
                # 需要保证 b 的指针在 c 的指针的左侧
                while second < third and nums[second] + nums[third] > target:#因为指针向右移动，second+third会越来越大，我们让third-1使得减少第三次循环
                    third -= 1
                # 如果指针重合，随着 b 后续的增加
                # 就不会有满足 a+b+c=0 并且 b<c 的 c 了，可以退出循环
                if second == third:#循环跳出条件
                    break
                if nums[second] + nums[third] == target:
                    ans.append([nums[first], nums[second], nums[third]])
        
        return ans

作者：力扣官方题解
链接：https://leetcode.cn/problems/3sum/solutions/284681/san-shu-zhi-he-by-leetcode-solution/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
