前缀和的概念
首先，我们使用一个叫做“前缀和”的概念。对于数组中的任何位置 j，前缀和 pre[j] 是数组中从第一个元素到第 j 个元素的总和。这意味着如果你想知道从元素 i+1 到 j 的子数组的和，你可以用 pre[j] - pre[i] 来计算。

使用 Map 来存储前缀和
在代码中，我们用一个 Map（哈希表）来存储每个前缀和出现的次数。这是为了快速检查某个特定的前缀和是否已经存在，以及它出现了多少次。

核心逻辑解析
当我们在数组中向前移动时，我们逐步增加 pre（当前的累积和）。对于每个新的 pre 值，我们检查 pre - k 是否在 Map 中：

pre - k 的意义：这个检查的意义在于，如果 pre - k 存在于 Map 中，说明之前在某个点的累积和是 pre - k。由于当前的累积和是 pre，这意味着从那个点到当前点的子数组之和恰好是 k（因为 pre - (pre - k) = k）。

如何使用这个信息：如果 pre - k 在 Map 中，那么 pre - k 出现的次数表示从不同的起始点到当前点的子数组和为 k 的不同情况。这是因为每一个 pre - k 都对应一个起点，使得从那个起点到当前点的子数组和为 k。

因此，每当我们找到一个 pre - k 存在于 Map 中时，我们就把它的计数（即之前这种情况发生的次数）加到 count 上，因为这表示我们又找到了相应数量的以当前元素结束的子数组，其和为 k。

例子
假设 k = 7，并且我们当前的累积和 pre 是 10，如果在 Map 中 3（即 10 - 7）出现了两次，这表示存在两个不同的起始点，使得从那些起始点到当前点的子数组之和是 7。

自己写了一下：
class Solution(object):
    def subarraySum(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        count=0
        n=len(nums)
        sums=0
        hashmap=collections.defaultdict(list)
        for i in range(n):
            sums+=nums[i]
            hashmap[sums]=i
            if (sums==k and k!=0)or sums-k in hashmap:
                count+=1
            
        return count
        有问题，因为遇到输入[1],k=0或者1的时候我的判断总是错开，k=0的时候应该输出0，但是sums-k确实在里面；k=1的时候应该输出1，但是判断又是k！=0
  问题的本质在于，我把每个前缀和当作key，value作为下标，那这里的问题是没法统计相同key的个数，所以


  答案：前缀和加哈希
import collections

class Solution(object):
    def subarraySum(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        count = 0
        pre = 0
        mp = collections.defaultdict(int)
        mp[0] = 1  # pre 为 0 出现 1 次

        for num in nums:
            pre += num
            if pre - k in mp:
                count += mp[pre - k]  # pre - k 表示此前有多少个前缀和满足条件
            mp[pre] += 1  # 当前前缀和 pre 出现次数 +1

        return count

法二：暴力求解（易想到）
class Solution:
    def subarraySum(self, nums, k):
        count = 0
        for start in range(len(nums)):
            sum_val = 0
            for end in range(start, -1, -1):  # 从 start 到 0
                sum_val += nums[end]
                if sum_val == k:
                    count += 1
        return count
