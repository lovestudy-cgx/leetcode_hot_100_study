我自己的(通过）用时较慢，但是思想是对的：创建一个列表，有重合的话就把之前的元素去掉，再append融合后的空间
class Solution(object):
    def merge(self, intervals):
        """
        :type intervals: List[List[int]]
        :rtype: List[List[int]]
        """
        n=len(intervals)
        signal=0
        sort1=sorted(intervals)
        list1=[sort1[0]]
        for i in range(1,n):
            if sort1[i][1]<=sort1[i-1][1] and sort1[i][0]<=sort1[i-1][1]:
                new=[sort1[i-1][0],sort1[i-1][1]]
                list1.pop()
                list1.append(new)
                sort1[i]=new
            elif sort1[i][1]>sort1[i-1][1] and sort1[i][0]<=sort1[i-1][1]:
                new=[sort1[i-1][0],sort1[i][1]]
                list1.pop()
                list1.append(new)
                sort1[i]=new
            else:
                list1.append(sort1[i])
        return list1

gpt给的stack（因为就在想每输入一个区间，我得和上一次处理的区间操作才能append，所以像栈。换言之，我的程序就是栈的思想（pop再append），但是看看更高阶的
class Solution(object):
    def merge(self, intervals):
        """
        :type intervals: List[List[int]]
        :rtype: List[List[int]]
        """
        if not intervals:
            return []

        # 先按照区间起点升序排列
        intervals.sort(key=lambda x: x[0])

        stack = []
        stack.append(intervals[0])

        for i in range(1, len(intervals)):
            top = stack[-1]
            current = intervals[i]

            # 如果当前区间与栈顶区间重叠，就合并
            if current[0] <= top[1]:
                top[1] = max(top[1], current[1])  # 修改栈顶区间的右端点
            else:
                stack.append(current)

        return stack

答案：
class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        intervals.sort(key=lambda x: x[0])

        merged = []
        for interval in intervals:
            # 如果列表为空，或者当前区间与上一区间不重合，直接添加
            if not merged or merged[-1][1] < interval[0]:
                merged.append(interval)
            else:
                # 否则的话，我们就可以与上一区间进行合并
                merged[-1][1] = max(merged[-1][1], interval[1])

        return merged

作者：力扣官方题解
链接：https://leetcode.cn/problems/merge-intervals/solutions/203562/he-bing-qu-jian-by-leetcode-solution/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
            
