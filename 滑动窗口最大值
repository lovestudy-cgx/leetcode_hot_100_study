首先需要有初始化的概念，无论是做窗口，然后微调，这一步代码得会
class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        n = len(nums)
        # 注意 Python 默认的优先队列是小根堆，而本题是大根堆，因此取个相反值
        q = [(-nums[i], i) for i in range(k)]
        heapq.heapify(q)

        ans = [-q[0][0]]
        for i in range(k, n):#定义窗口的右端点
            heapq.heappush(q, (-nums[i], i))
            while q[0][1] <= i - k:#如果该元素在窗口左边，就去掉
                heapq.heappop(q)
            ans.append(-q[0][0])#因为处理之后的最左边就是堆的最小值（也就是原来列表的最大值）
        
        return ans

heapq 是 Python 自带的一个 堆队列（优先队列）算法模块，底层使用的是一个 最小堆（小根堆）。

**最小堆（min-heap）**的定义是：每个节点的值都小于或等于其子节点的值。

堆结构可以用一个普通的 list 表示，heapq 操作的就是这个 list。

它不是一个类，而是一组函数（对 list 操作）。

🔧 heapq 提供的核心函数：
函数	作用
heapq.heapify(lst)	将一个列表原地转化为一个堆（最小堆）结构
heapq.heappush(heap, item)	向堆中加入一个元素，并保持堆结构
heapq.heappop(heap)	弹出并返回堆中最小的元素
heapq.heappushpop(heap, item)	将 item 加入堆中后再 pop 最小值，效率高于分开执行
heapq.nlargest(n, iterable)	返回 iterable 中最大的 n 个元素
heapq.nsmallest(n, iterable)	返回最小的 n 个元素


class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        n = len(nums)
        q = collections.deque()
        for i in range(k):
            while q and nums[i] >= nums[q[-1]]:
                q.pop()
            q.append(i)

        ans = [nums[q[0]]]
        for i in range(k, n):
            while q and nums[i] >= nums[q[-1]]:
                q.pop()
            q.append(i)
            while q[0] <= i - k:
                q.popleft()
            ans.append(nums[q[0]])
        
        return ans

这一方法是按照队列来写的，核心也是先创建队列，然后ans存储最大值，deque存储序号，不同的是，这个里面的while会判断我准备传入的q和之前存放的所有值比较，如果他大，就把之前所有数删掉。第二个while判断是否做窗口越界，其实我觉得这一种更符合惯性思维，
而且没有用到那种专门的堆的函数。
细节：while q：q非空的时候才能执行。本题设置deque因为便于删除元素o1，list是on


以下是对 Python 中 deque、stack、list 的操作异同、函数介绍和复杂度分析的全面总结，帮助你从使用到底层理解清晰掌握这三个结构的异同点和各自适用场景。

🔍 一、总体对比表
特性/结构	deque（双端队列）	list（动态数组）	stack（栈）
底层结构	双向链表/循环数组实现	动态数组	通常是 list 实现（LIFO）
适合用作	队列、双端队列、滑窗结构	随机访问数据、一般用途数组	后进先出结构
支持双端操作	✅（appendleft/popleft）	❌（头部操作 O(n)）	❌
随机访问	❌（O(n)）	✅（O(1)）	❌
插入删除效率	O(1) 头尾操作	O(1) 尾插，头部 O(n)	O(1)
最大优势	双端快速操作	通用容器 + 支持切片	简洁 LIFO 实现
实际 stack 实现	❌（但也可模拟）	✅（最常见）	✅（list 就能实现）

🧩 二、操作函数与复杂度分析
1️⃣ collections.deque
操作	方法	平均时间复杂度	描述
队尾加元素	append(x)	O(1)	加到右边
队头加元素	appendleft(x)	O(1)	加到左边
队尾删元素	pop()	O(1)	从右边删除
队头删元素	popleft()	O(1)	从左边删除
随机访问	dq[i]	O(n)	不推荐，因非数组结构
旋转	rotate(n)	O(k)，k为步长	向右(正数)/左(负数)旋转
长度限制	deque(maxlen=n)	-	超过自动删除头部/尾部元素

2️⃣ list（列表）
操作	方法	平均时间复杂度	描述
尾部加元素	append(x)	O(1)	最常用操作
尾部删元素	pop()	O(1)	末尾删除
任意删元素	pop(i)	O(n-i)	中间或头部删除较慢
任意插入	insert(i, x)	O(n)	通常避免
头部删元素	pop(0)	O(n)	不推荐频繁用
切片	a[1:3]	O(k)	适合做数组截取
随机访问	a[i]	O(1)	支持快速随机访问

3️⃣ stack（栈）
Python 中栈一般直接用 list 实现，操作包括：

操作	方法	时间复杂度	描述
入栈	append(x)	O(1)	从末尾压入
出栈	pop()	O(1)	从末尾弹出
查看栈顶	stack[-1]	O(1)	取栈顶但不弹出

如果需要线程安全的栈，可使用 queue.LifoQueue()（开销稍大）

🧠 三、适用场景总结
应用场景	推荐结构	原因说明
滑动窗口、单调队列	deque	需要头尾双向快速入出
后进先出栈结构	list	简洁且高效的 LIFO 实现
普通数组操作	list	切片、索引、遍历方便
双端队列或限长缓存	deque	支持双端、maxlen 自动管理队列长度
大量随机读写	list	支持 O(1) 访问，数组结构最适合
高性能队列操作	deque	比 list 头部操作快很多，不要用 pop(0)

双端队列和单端的区别：
| 比较维度   | `deque`                | `queue.Queue` |
| ------ | ---------------------- | ------------- |
| 入队操作   | `append`, `appendleft` | `put()`       |
| 出队操作   | `pop`, `popleft`       | `get()`       |
| 是否线程安全 | ❌ 否                    | ✅ 是           |
| 是否双端支持 | ✅ 是                    | ❌ 否           |
| 应用场景   | 算法题、滑窗、单调队列            | 多线程数据通信队列     |


| 功能     | `collections.deque`      | `queue.Queue`          | 时间复杂度 | 说明                 |
| ------ | ------------------------ | ---------------------- | ----- | ------------------ |
| 入队（尾部） | `append(x)`              | `put(x)`               | O(1)  | 加到队尾（右侧）           |
| 入队（头部） | `appendleft(x)`          | ❌ 不支持                  | O(1)  | 双端队列特性             |
| 出队（头部） | `popleft()`              | `get()`                | O(1)  | 弹出队首（左侧）           |
| 出队（尾部） | `pop()`                  | ❌ 不支持                  | O(1)  | 双端队列特性             |
| 查看队首   | `deque[0]`               | ❌ 不直接支持                | O(1)  | 需先判断是否为空           |
| 查看队尾   | `deque[-1]`              | ❌ 不直接支持                | O(1)  | -                  |
| 判断是否为空 | `not deque` 或 `len()==0` | `empty()`              | O(1)  | -                  |
| 当前长度   | `len(deque)`             | `qsize()`              | O(1)  | -                  |
| 清空队列   | `clear()`                | ❌ 不直接支持                | O(n)  | -                  |
| 最大长度限制 | 可设定 `deque(maxlen=N)`    | 可设定 `Queue(maxsize=N)` | -     | 两者均支持              |
| 阻塞等待支持 | ❌ 不支持                    | ✅ 支持（阻塞/非阻塞）           | -     | `put(block=False)` |
| 多线程安全  | ❌ 否                      | ✅ 是                    | -     | 内部加锁               |

