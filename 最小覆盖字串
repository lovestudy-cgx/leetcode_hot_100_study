答案：
# 请选择 Python3 提交代码，而不是 Python
class Solution:
    def minWindow(self, s: str, t: str) -> str:
        ans_left, ans_right = -1, len(s)
        cnt_s = Counter()  # s 子串字母的出现次数，这里是初始化，因此不需要填入值。  Counter 是 Python 中 collections 模块提供的一个哈希表（字典）子类，专门用来做元素频数统计的。底层也是字典，这里不用普通字典的目的是为了下文的涵盖。
        cnt_t = Counter(t)  # t 中字母的出现次数

        left = 0
        for right, c in enumerate(s):  # 移动子串右端点
            cnt_s[c] += 1  # 右端点字母移入子串
            while cnt_s >= cnt_t:  # 涵盖
                if right - left < ans_right - ans_left:  # 找到更短的子串
                    ans_left, ans_right = left, right  # 记录此时的左右端点
                cnt_s[s[left]] -= 1  # 左端点字母移出子串
                left += 1
        return "" if ans_left < 0 else s[ans_left: ans_right + 1]

上面的问题在于，counter底层判断是否涵盖的时候需要花费Σ（代表counter里面的key的个数，最不幸的话是52个）（大小写英文字母），所以考虑优化，采用less来专门记录s中比t少的字母

class Solution:
    def minWindow(self, s: str, t: str) -> str:
        ans_left, ans_right = -1, len(s)
        cnt = defaultdict(int)  # 比 Counter 更快
        for c in t:
            cnt[c] += 1
        less = len(cnt)  # 有 less 种字母的出现次数 < t 中的字母出现次数。less记录的是字典多少个键值对，有多少种字母。

        left = 0
        for right, c in enumerate(s):  # 移动子串右端点
            cnt[c] -= 1  # 右端点字母移入子串
            if cnt[c] == 0:
                # 原来窗口内 c 的出现次数比 t 的少，现在一样多
                less -= 1
            while less == 0:  # 涵盖：所有字母的出现次数都是 >=
                if right - left < ans_right - ans_left:  # 找到更短的子串
                    ans_left, ans_right = left, right  # 记录此时的左右端点
                x = s[left]  # 左端点字母
                if cnt[x] == 0:
                    # x 移出窗口之前，检查出现次数，
                    # 如果窗口内 x 的出现次数和 t 一样，
                    # 那么 x 移出窗口后，窗口内 x 的出现次数比 t 的少
                    less += 1
                cnt[x] += 1  # 左端点字母移出子串
                left += 1
        return "" if ans_left < 0 else s[ans_left: ans_right + 1]

无关字符无论出现多少次，在进入窗口时都只会让 cnt[c] 变成负数，永远不会影响 less，因为它们从未在 cnt 中被设定为正值（即目标字符），也永远不会“配平为 0”触发 less -= 1，所以无关。

🔁 更进一步补一层解释
在初始化阶段我们只对 t 中的字符做了 cnt[c] += 1，因此只有 t 中的字符的 cnt[c] 初值是正的。

只有这些目标字符的计数能从正数通过滑动窗口变成 0，才会导致 less -= 1。

反之，所有不在 t 中的字符，在 cnt 中初始是 0，一旦滑入窗口就变为负值，永远不会等于 0，永远不可能改变 less。

所以：

✅ 判断 cnt[c] == 0 是精确而安全的，它仅在从“还差一点”变为“刚刚好”时触发，并且永远不会被无关字符干扰。

