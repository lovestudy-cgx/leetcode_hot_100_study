#找到一个字符串里面的最长字串（没有相同字母）比如abcbcsssa就返回abc
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        # 哈希集合，记录每个字符是否出现过
        occ = set()
        n = len(s)
        # 右指针，初始值为 -1，相当于我们在字符串的左边界的左侧，还没有开始移动
        rk, ans = -1, 0
        for i in range(n):
            if i != 0:
                # 左指针向右移动一格，移除一个字符
                occ.remove(s[i - 1])
            while rk + 1 < n and s[rk + 1] not in occ:
                # 不断地移动右指针
                occ.add(s[rk + 1])
                rk += 1
            # 第 i 到 rk 个字符是一个极长的无重复字符子串
            ans = max(ans, rk - i + 1)
        return ans

#哈希存储在python中以set，dict形式出现，他是基于这样一种思想：什么结构，如果按照索引查找都是o1（在python已有结构中，如果是链表等自定义就不是），但是有些情况我们就是想按照值查找，如果不用哈希，那就是从头扫描到尾部，花费ON。
哈希的用处就是把值也能映射到地址中，按照索引的速度来存储：一个袋子里有苹果，香蕉，照相机。。。。我想找苹果，我得在大袋子里一个个看（假设眼睛不好）。哈希就是把苹果放到包里的最前的格子里，如果格子里有苹果就找到，没有就确定没有。
之前说的哈希所需要的key啊，set啊不能变，是因为dict的key和set里的值是作为哈希映射的自变量，当然不能变，所以你的key和set里面放不了list。但不是说key不能加入，set不能添加扩充。不要混淆。
python里面已有的结构都是线性的（str list tuple）或者hash的（set dict），非线性的结构都需要通过指针和自定义类来实现（链表，树）

滑动窗口采用集合的add和remove来实现配合while判断来不定加长set长度

#最长回文字串动态规划思想：如果abcba是最长回文串，那么bcb一定也是回文串，因此我的核心是找到本身dp[i+1][j-1]为true的，然后dp[i]==dp[j]的就ok
class Solution:
    def longestPalindrome(self, s: str) -> str:
        n = len(s)
        if n < 2:
            return s
        
        max_len = 1
        begin = 0
        # dp[i][j] 表示 s[i..j] 是否是回文串
        dp = [[False] * n for _ in range(n)]
        for i in range(n):
            dp[i][i] = True
        
        # 递推开始
        # 先枚举子串长度
        for L in range(2, n + 1):
            # 枚举左边界，左边界的上限设置可以宽松一些
            for i in range(n):
                # 由 L 和 i 可以确定右边界，即 j - i + 1 = L 得
                j = L + i - 1
                # 如果右边界越界，就可以退出当前循环
                if j >= n:
                    break
                    
                if s[i] != s[j]:
                    dp[i][j] = False 
                else:
                    if j - i < 3:
                        dp[i][j] = True
                    else:
                        dp[i][j] = dp[i + 1][j - 1]
                
                # 只要 dp[i][L] == true 成立，就表示子串 s[i..L] 是回文，此时记录回文长度和起始位置
                if dp[i][j] and j - i + 1 > max_len:
                    max_len = j - i + 1
                    begin = i
        return s[begin:begin + max_len]

作者：力扣官方题解
链接：https://leetcode.cn/problems/longest-palindromic-substring/solutions/255195/zui-chang-hui-wen-zi-chuan-by-leetcode-solution/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
